from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pymongo import MongoClient, ASCENDING
from pymongo.errors import OperationFailure, CollectionInvalid, DuplicateKeyError
from flask import Flask
from threading import Thread
import os
import re
from datetime import datetime, UTC, timedelta 
import asyncio
import urllib.parse
from fuzzywuzzy import process
from concurrent.futures import ThreadPoolExecutor

# Configs - ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶á ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá‡•§
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
RESULTS_COUNT = int(os.getenv("RESULTS_COUNT", 10))
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
DATABASE_URL = os.getenv("DATABASE_URL")
UPDATE_CHANNEL = os.getenv("UPDATE_CHANNEL", "https://t.me/CTGMovieOfficial")
START_PIC = os.getenv("START_PIC", "https://i.ibb.co/prnGXMr3/photo-2025-05-16-05-15-45-7504908428624527364.jpg")

app = Client("movie_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# MongoDB setup
mongo = MongoClient(DATABASE_URL)
db = mongo["movie_bot"]
movies_col = db["movies"]
feedback_col = db["feedback"]
stats_col = db["stats"]
users_col = db["users"]
settings_col = db["settings"]
requests_col = db["requests"]

# Indexing - Optimized for faster search
try:
    movies_col.drop_index("message_id_1")
    print("Existing 'message_id_1' index dropped successfully (if it existed).")
except Exception as e:
    if "index not found" not in str(e):
        print(f"Error dropping existing index 'message_id_1': {e}")
    else:
        print("'message_id_1' index not found, proceeding with creation.")

try:
    movies_col.create_index("message_id", unique=True, background=True)
    print("Index 'message_id' (unique) ensured successfully.")
except DuplicateKeyError as e:
    print(f"Error: Cannot create unique index on 'message_id' due to duplicate entries. "
          f"Please clean your database manually if this persists. Error: {e}")
except OperationFailure as e:
    print(f"Error creating index 'message_id': {e}")

movies_col.create_index("language", background=True)
movies_col.create_index([("title_clean", ASCENDING)], background=True)
movies_col.create_index([("language", ASCENDING), ("title_clean", ASCENDING)], background=True)
movies_col.create_index([("views_count", ASCENDING)], background=True)
print("All other necessary indexes ensured successfully.")

# Flask App for health check
flask_app = Flask(__name__)
@flask_app.route("/")
def home():
    return "Bot is running!"
Thread(target=lambda: flask_app.run(host="0.0.0.0", port=8080)).start() 

# Initialize a global ThreadPoolExecutor for running blocking functions (like fuzzywuzzy)
thread_pool_executor = ThreadPoolExecutor(max_workers=5)

# Helpers
def clean_text(text):
    return re.sub(r'[^a-zA-Z0-9]', '', text.lower())

def extract_language(text):
    langs = ["Bengali", "Hindi", "English"]
    return next((lang for lang in langs if lang.lower() in text.lower()), None)

def extract_year(text):
    match = re.search(r'\b(19|20)\d{2}\b', text)
    return int(match.group(0)) if match else None

async def delete_message_later(chat_id, message_id, delay=43200): # ‡¶°‡¶ø‡¶≤‡ßá 300 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° (5 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü) ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
    await asyncio.sleep(delay)
    try:
        await app.delete_messages(chat_id, message_id)
    except Exception as e:
        if "MESSAGE_ID_INVALID" not in str(e) and "MESSAGE_DELETE_FORBIDDEN" not in str(e):
            print(f"Error deleting message {message_id} in chat {chat_id}: {e}")

def find_corrected_matches(query_clean, all_movie_titles_data, score_cutoff=70, limit=5):
    if not all_movie_titles_data:
        return []

    choices = [item["title_clean"] for item in all_movie_titles_data]
    
    matches_raw = process.extract(query_clean, choices, limit=limit)

    corrected_suggestions = []
    for matched_clean_title, score in matches_raw:
        if score >= score_cutoff:
            for movie_data in all_movie_titles_data:
                if movie_data["title_clean"] == matched_clean_title:
                    corrected_suggestions.append({
                        "title": movie_data["original_title"],
                        "message_id": movie_data["message_id"],
                        "language": movie_data["language"],
                        "views_count": movie_data.get("views_count", 0) # ‡¶≠‡¶ø‡¶â ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                    })
                    break
    return corrected_suggestions

# Global dictionary to keep track of last start command time per user
user_last_start_time = {}

@app.on_message(filters.chat(CHANNEL_ID))
async def save_post(_, msg: Message):
    text = msg.text or msg.caption
    if not text:
        return

    # ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶≤ ID ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£
    thumbnail_file_id = None
    if msg.photo:
        thumbnail_file_id = msg.photo.file_id
    elif msg.video and msg.video.thumbs:
        thumbnail_file_id = msg.video.thumbs[0].file_id # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶≤

    movie_to_save = {
        "message_id": msg.id,
        "title": text.splitlines()[0], # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø
        "full_caption": text, # ‡¶™‡ßÅ‡¶∞‡ßã ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶∂‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶õ‡¶ø
        "date": msg.date,
        "year": extract_year(text),
        "language": extract_language(text),
        "title_clean": clean_text(text),
        "views_count": 0,
        "likes": 0,
        "dislikes": 0,
        "rated_by": [],
        "thumbnail_id": thumbnail_file_id # ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶≤ ID ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
    }
    
    result = movies_col.update_one({"message_id": msg.id}, {"$set": movie_to_save}, upsert=True)

    if result.upserted_id is not None:
        setting = settings_col.find_one({"key": "global_notify"})
        if setting and setting.get("value"):
            # ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø
            download_button = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        "‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï", # ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
                        url=f"https://t.me/{app.me.username}?start=watch_{msg.id}" # /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶™‡ßá‡¶≤‡ßã‡¶°
                    )
                ]
            ])
            
            # ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
            notification_caption = f"üé¨ **‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!**\n\n**{movie_to_save['title']}**\n\n‡¶è‡¶ñ‡¶®‡¶á ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®!"

            for user in users_col.find({"notify": {"$ne": False}}):
                try:
                    if thumbnail_file_id:
                        # ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶≤ ‡¶∏‡¶π ‡¶´‡¶ü‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                        m = await app.send_photo(
                            user["_id"],
                            photo=thumbnail_file_id,
                            caption=notification_caption,
                            reply_markup=download_button
                        )
                    else:
                        # ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                        m = await app.send_message(
                            user["_id"],
                            notification_caption,
                            reply_markup=download_button
                        )
                    asyncio.create_task(delete_message_later(m.chat.id, m.id))
                    await asyncio.sleep(0.05)
                except Exception as e:
                    if "PEER_ID_INVALID" in str(e) or "USER_IS_BOT" in str(e) or "USER_DEACTIVATED_REQUIRED" in str(e) or "BOT_BLOCKED" in str(e):
                        print(f"Skipping notification to invalid/blocked user {user['_id']}: {e}")
                        # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá notify ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ó false ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
                        users_col.update_one({"_id": user["_id"]}, {"$set": {"notify": False}})
                    else:
                        print(f"Failed to send notification to user {user['_id']}: {e}")

@app.on_message(filters.command("start"))
async def start(_, msg: Message):
    user_id = msg.from_user.id
    current_time = datetime.now(UTC)

    if user_id in user_last_start_time:
        time_since_last_start = current_time - user_last_start_time[user_id]
        if time_since_last_start < timedelta(seconds=5):
            print(f"User {user_id} sent /start too quickly. Ignoring.")
            return

    user_last_start_time[user_id] = current_time

    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï
    if len(msg.command) > 1 and msg.command[1].startswith("watch_"):
        message_id = int(msg.command[1].replace("watch_", ""))
        try:
            # app.copy_message ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶è‡¶§‡ßá ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ü‡ßá‡¶ï‡¶∂‡¶® ‡¶¨‡¶ú‡¶æ‡¶Ø‡¶º ‡¶•‡¶æ‡¶ï‡ßá
            copied_message = await app.copy_message(
                chat_id=msg.chat.id,        # ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá (‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü)
                from_chat_id=CHANNEL_ID,    # ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤)
                message_id=message_id,      # ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø
                protect_content=True        # ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá
            )
            
            movie_data = movies_col.find_one({"message_id": message_id})
            if movie_data:
                likes_count = movie_data.get('likes', 0)
                dislikes_count = movie_data.get('dislikes', 0)
                
                rating_buttons = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(f"üëç ‡¶≤‡¶æ‡¶á‡¶ï ({likes_count})", callback_data=f"like_{message_id}_{user_id}"),
                        InlineKeyboardButton(f"üëé ‡¶°‡¶ø‡¶∏‡¶≤‡¶æ‡¶á‡¶ï ({dislikes_count})", callback_data=f"dislike_{message_id}_{user_id}")
                    ]
                ])
                # ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                rating_message = await app.send_message(
                    chat_id=msg.chat.id,
                    text="‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶ï‡ßá‡¶Æ‡¶® ‡¶≤‡¶æ‡¶ó‡¶≤‡ßã? ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¶‡¶ø‡¶®:",
                    reply_markup=rating_buttons,
                    reply_to_message_id=copied_message.id # ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                )
                asyncio.create_task(delete_message_later(rating_message.chat.id, rating_message.id))
                asyncio.create_task(delete_message_later(copied_message.chat.id, copied_message.id)) # ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

            movies_col.update_one(
                {"message_id": message_id},
                {"$inc": {"views_count": 1}}
            )

        except Exception as e:
            error_msg = await msg.reply_text("‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø ‡¶¨‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
            asyncio.create_task(delete_message_later(error_msg.chat.id, error_msg.id))
            print(f"Error copying message from start payload: {e}")
        return # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º

    # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßá‡¶≤‡ßã‡¶° ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶ø ‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    users_col.update_one(
        {"_id": msg.from_user.id},
        {"$set": {"joined": datetime.now(UTC), "notify": True}},
        upsert=True
    )
    btns = InlineKeyboardMarkup([
        [InlineKeyboardButton("‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤", url=UPDATE_CHANNEL)],
        [InlineKeyboardButton("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó", url="https://t.me/ctgmovies23")]
    ])
    start_message = await msg.reply_photo(photo=START_PIC, caption="‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¶‡ßá‡¶¨‡ßã‡•§", reply_markup=btns)
    asyncio.create_task(delete_message_later(start_message.chat.id, start_message.id))

@app.on_message(filters.command("feedback") & filters.private)
async def feedback(_, msg: Message):
    if len(msg.command) < 2:
        error_msg = await msg.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /feedback ‡¶è‡¶∞ ‡¶™‡¶∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
        asyncio.create_task(delete_message_later(error_msg.chat.id, error_msg.id))
        return
    feedback_col.insert_one({
        "user": msg.from_user.id,
        "text": msg.text.split(None, 1)[1],
        "time": datetime.now(UTC)
    })
    m = await msg.reply("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!")
    asyncio.create_task(delete_message_later(m.chat.id, m.id))

@app.on_message(filters.command("broadcast") & filters.user(ADMIN_IDS))
async def broadcast(_, msg: Message):
    if len(msg.command) < 2:
        error_msg = await msg.reply("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /broadcast ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶ñ‡¶æ‡¶®‡ßá")
        asyncio.create_task(delete_message_later(error_msg.chat.id, error_msg.id))
        return
    count = 0
    message_to_send = msg.text.split(None, 1)[1]
    for user in users_col.find():
        try:
            await app.send_message(user["_id"], message_to_send)
            count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            if "PEER_ID_INVALID" in str(e) or "USER_IS_BLOCKED" in str(e) or "USER_BOT" in str(e) or "USER_DEACTIVATED_REQUIRED" in str(e):
                print(f"Skipping broadcast to invalid/blocked user {user['_id']}: {e}")
            else:
                print(f"Failed to broadcast to user {user['_id']}: {e}")
    reply_msg = await msg.reply(f"{count} ‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    asyncio.create_task(delete_message_later(reply_msg.chat.id, reply_msg.id))

@app.on_message(filters.command("stats") & filters.user(ADMIN_IDS))
async def stats(_, msg: Message):
    stats_msg = await msg.reply(
        f"‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: {users_col.count_documents({})}\n"
        f"‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßÅ‡¶≠‡¶ø: {movies_col.count_documents({})}\n"
        f"‡¶Æ‡ßã‡¶ü ‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï: {feedback_col.count_documents({})}\n"
        f"‡¶Æ‡ßã‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß: {requests_col.count_documents({})}"
    )
    asyncio.create_task(delete_message_later(stats_msg.chat.id, stats_msg.id))

@app.on_message(filters.command("notify") & filters.user(ADMIN_IDS))
async def notify_command(_, msg: Message):
    if len(msg.command) != 2 or msg.command[1] not in ["on", "off"]:
        error_msg = await msg.reply("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /notify on ‡¶Ö‡¶•‡¶¨‡¶æ /notify off")
        asyncio.create_task(delete_message_later(error_msg.chat.id, error_msg.id))
        return
    new_value = True if msg.command[1] == "on" else False
    settings_col.update_one(
        {"key": "global_notify"},
        {"$set": {"value": new_value}},
        upsert=True
    )
    status = "‡¶ö‡¶æ‡¶≤‡ßÅ" if new_value else "‡¶¨‡¶®‡ßç‡¶ß"
    reply_msg = await msg.reply(f"‚úÖ ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® {status} ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
    asyncio.create_task(delete_message_later(reply_msg.chat.id, reply_msg.id))

@app.on_message(filters.command("delete_movie") & filters.user(ADMIN_IDS))
async def delete_specific_movie(_, msg: Message):
    if len(msg.command) < 2:
        error_msg = await msg.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶¶‡¶ø‡¶®‡•§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/delete_movie <‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤>`")
        asyncio.create_task(delete_message_later(error_msg.chat.id, error_msg.id))
        return
    
    movie_title_to_delete = msg.text.split(None, 1)[1].strip()
    
    movie_to_delete = movies_col.find_one({"title": {"$regex": re.escape(movie_title_to_delete), "$options": "i"}})

    if not movie_to_delete:
        cleaned_title_to_delete = clean_text(movie_title_to_delete)
        movie_to_delete = movies_col.find_one({"title_clean": {"$regex": f"^{re.escape(cleaned_title_to_delete)}$", "$options": "i"}})

    if movie_to_delete:
        movies_col.delete_one({"_id": movie_to_delete["_id"]})
        reply_msg = await msg.reply(f"‡¶Æ‡ßÅ‡¶≠‡¶ø **{movie_to_delete['title']}** ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        asyncio.create_task(delete_message_later(reply_msg.chat.id, reply_msg.id))
    else:
        error_msg = await msg.reply(f"**{movie_title_to_delete}** ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        asyncio.create_task(delete_message_later(error_msg.chat.id, error_msg.id))

@app.on_message(filters.command("delete_all_movies") & filters.user(ADMIN_IDS))
async def delete_all_movies_command(_, msg: Message):
    confirmation_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶∏‡¶¨ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="confirm_delete_all_movies")],
        [InlineKeyboardButton("‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="cancel_delete_all_movies")]
    ])
    reply_msg = await msg.reply("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá **‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø** ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßÄ‡¶Ø‡¶º!", reply_markup=confirmation_button)
    asyncio.create_task(delete_message_later(reply_msg.chat.id, reply_msg.id))

@app.on_callback_query(filters.regex(r"^noresult_(wrong|notyet|uploaded|coming)_(\d+)_([^ ]+)$") & filters.user(ADMIN_IDS))
async def handle_admin_reply(_, cq: CallbackQuery):
    parts = cq.data.split("_", 3)
    reason = parts[1]
    user_id = int(parts[2])
    encoded_query = parts[3]
    original_query = urllib.parse.unquote_plus(encoded_query)

    messages = {
        "wrong": f"‚ùå ‡¶Ü‡¶™‡¶®‡¶ø **'{original_query}'** ‡¶®‡¶æ‡¶Æ‡ßá ‡¶≠‡ßÅ‡¶≤ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "notyet": f"‚è≥ **'{original_query}'** ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ü‡¶∏‡ßá‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "uploaded": f"üì§ **'{original_query}'** ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "coming": f"üöÄ **'{original_query}'** ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶∂‡¶ø‡¶ó‡¶ó‡¶ø‡¶∞‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®."
    }

    try:
        m_sent = await app.send_message(user_id, messages[reason])
        asyncio.create_task(delete_message_later(m_sent.chat.id, m_sent.id))
        await cq.answer("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‚úÖ", show_alert=True)
        await cq.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(f"‚úÖ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {messages[reason].split(' ')[0]}", callback_data="noop")
        ]]))
    except Exception as e:
        await cq.answer("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø ‚ùå", show_alert=True)
        print(f"Error sending admin reply to user {user_id}: {e}")

@app.on_message(filters.command("popular") & (filters.private | filters.group))
async def popular_movies(_, msg: Message):
    popular_movies_list = list(movies_col.find(
        {"views_count": {"$exists": True}}
    ).sort("views_count", -1).limit(RESULTS_COUNT))

    if popular_movies_list:
        buttons = []
        for movie in popular_movies_list:
            if "title" in movie and "message_id" in movie:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"{movie['title'][:40]} ({movie.get('views_count', 0)} ‡¶≠‡¶ø‡¶â)",
                        url=f"https://t.me/{app.me.username}?start=watch_{movie['message_id']}"
                    )
                ])
        
        reply_markup = InlineKeyboardMarkup(buttons)
        m = await msg.reply_text(
            "üî• ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã:\n\n",
            reply_markup=reply_markup,
            quote=True
        )
        asyncio.create_task(delete_message_later(m.chat.id, m.id))
    else:
        m = await msg.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§", quote=True)
        asyncio.create_task(delete_message_later(m.chat.id, m.id))

@app.on_message(filters.command("request") & filters.private)
async def request_movie(_, msg: Message):
    if len(msg.command) < 2:
        error_msg = await msg.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /request ‡¶è‡¶∞ ‡¶™‡¶∞ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `/request The Creator`", quote=True)
        asyncio.create_task(delete_message_later(error_msg.chat.id, error_msg.id))
        return
    
    movie_name = msg.text.split(None, 1)[1].strip()
    user_id = msg.from_user.id
    username = msg.from_user.username or msg.from_user.first_name

    requests_col.insert_one({
        "user_id": user_id,
        "username": username,
        "movie_name": movie_name,
        "request_time": datetime.now(UTC),
        "status": "pending"
    })

    m = await msg.reply(f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß **'{movie_name}'** ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶è‡¶ü‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§", quote=True)
    asyncio.create_task(delete_message_later(m.chat.id, m.id))

    encoded_movie_name = urllib.parse.quote_plus(movie_name)
    admin_request_btns = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", callback_data=f"req_fulfilled_{user_id}_{encoded_movie_name}"),
        InlineKeyboardButton("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", callback_data=f"req_rejected_{user_id}_{encoded_movie_name}")
    ]])

    for admin_id in ADMIN_IDS:
        try:
            await app.send_message(
                admin_id,
                f"‚ùó *‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß!*\n\n"
                f"üé¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ: `{movie_name}`\n"
                f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: [{username}](tg://user?id={user_id}) (`{user_id}`)",
                reply_markup=admin_request_btns,
                disable_web_page_preview=True
            )
        except Exception as e:
            print(f"Could not notify admin {admin_id} about request: {e}")

@app.on_message(filters.text & (filters.group | filters.private))
async def search(_, msg: Message):
    query = msg.text.strip()
    if not query:
        return

    if msg.chat.type == "group":
        if len(query) < 3:
            return
        if msg.reply_to_message or msg.from_user.is_bot:
            return
        if not re.search(r'[a-zA-Z0-9]', query):
            return

    user_id = msg.from_user.id
    users_col.update_one(
        {"_id": user_id},
        {"$set": {"last_query": query}, "$setOnInsert": {"joined": datetime.now(UTC)}},
        upsert=True
    )

    loading_message = await msg.reply("üîé ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...", quote=True)
    asyncio.create_task(delete_message_later(loading_message.chat.id, loading_message.id))

    query_clean = clean_text(query)
    
    matched_movies_direct = list(movies_col.find(
        {"$or": [
            {"title_clean": {"$regex": f"^{re.escape(query_clean)}", "$options": "i"}},
            {"title": {"$regex": re.escape(query), "$options": "i"}}
        ]}
    ).limit(RESULTS_COUNT))

    if matched_movies_direct:
        await loading_message.delete()
        buttons = []
        for movie in matched_movies_direct:
            buttons.append([
                InlineKeyboardButton(
                    text=f"{movie['title'][:40]} ({movie.get('views_count', 0)} ‡¶≠‡¶ø‡¶â)",
                    url=f"https://t.me/{app.me.username}?start=watch_{movie['message_id']}"
                )
            ])
        
        m = await msg.reply("üé¨ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:", reply_markup=InlineKeyboardMarkup(buttons), quote=True)
        asyncio.create_task(delete_message_later(m.chat.id, m.id))
        return

    all_movie_data_cursor = movies_col.find(
        {"title_clean": {"$regex": query_clean, "$options": "i"}},
        {"title_clean": 1, "original_title": "$title", "message_id": 1, "language": 1, "views_count": 1}
    ).limit(100)

    all_movie_data = list(all_movie_data_cursor)

    corrected_suggestions = await asyncio.get_event_loop().run_in_executor(
        thread_pool_executor,
        find_corrected_matches,
        query_clean,
        all_movie_data,
        70,
        RESULTS_COUNT
    )

    await loading_message.delete()

    if corrected_suggestions:
        buttons = []
        for movie in corrected_suggestions:
            buttons.append([
                InlineKeyboardButton(
                    text=f"{movie['title'][:40]} ({movie.get('views_count', 0)} ‡¶≠‡¶ø‡¶â)",
                    url=f"https://t.me/{app.me.username}?start=watch_{movie['message_id']}"
                )
            ])
        
        lang_buttons = [
            InlineKeyboardButton("‡¶¨‡ßá‡¶ô‡ßç‡¶ó‡¶≤‡¶ø", callback_data=f"lang_Bengali_{query_clean}"),
            InlineKeyboardButton("‡¶π‡¶ø‡¶®‡ßç‡¶¶‡¶ø", callback_data=f"lang_Hindi_{query_clean}"),
            InlineKeyboardButton("‡¶á‡¶Ç‡¶≤‡¶ø‡¶∂", callback_data=f"lang_English_{query_clean}")
        ]
        buttons.append(lang_buttons)

        m = await msg.reply("üîç ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø, ‡¶§‡¶¨‡ßá ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:", reply_markup=InlineKeyboardMarkup(buttons), quote=True)
        asyncio.create_task(delete_message_later(m.chat.id, m.id))
    else:
        Google_Search_url = "https://www.google.com/search?q=" + urllib.parse.quote(query)
        
        request_button = InlineKeyboardButton("‡¶è‡¶á ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data=f"request_movie_{user_id}_{urllib.parse.quote_plus(query)}")
        google_button_row = [InlineKeyboardButton("‡¶ó‡ßÅ‡¶ó‡¶≤‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®", url=Google_Search_url)]
        
        reply_markup_for_no_result = InlineKeyboardMarkup([
            google_button_row,
            [request_button]
        ])

        alert = await msg.reply_text( 
            """
‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§

‡¶Ø‡¶¶‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá Google ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§

‡¶Ö‡¶•‡¶¨‡¶æ, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§
""",
            reply_markup=reply_markup_for_no_result,
            quote=True
        )
        asyncio.create_task(delete_message_later(alert.chat.id, alert.id))

        encoded_query = urllib.parse.quote_plus(query)
        admin_btns = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶®‡¶æ‡¶Æ", callback_data=f"noresult_wrong_{user_id}_{encoded_query}"),
            InlineKeyboardButton("‚è≥ ‡¶è‡¶ñ‡¶®‡ßã ‡¶Ü‡¶∏‡ßá‡¶®‡¶ø", callback_data=f"noresult_notyet_{user_id}_{encoded_query}")
        ], [
            InlineKeyboardButton("üì§ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶Ü‡¶õ‡ßá", callback_data=f"noresult_uploaded_{user_id}_{encoded_query}"),
            InlineKeyboardButton("üöÄ ‡¶∂‡¶ø‡¶ó‡¶ó‡¶ø‡¶∞ ‡¶Ü‡¶∏‡¶¨‡ßá", callback_data=f"noresult_coming_{user_id}_{encoded_query}")
        ]])

        for admin_id in ADMIN_IDS:
            try:
                await app.send_message(
                    admin_id,
                    f"‚ùó *‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!*\n\n"
                    f"üîç ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®: `{query}`\n"
                    f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: [{msg.from_user.first_name}](tg://user?id={user_id}) (`{user_id}`)",
                    reply_markup=admin_btns,
                    disable_web_page_preview=True
                )
            except Exception as e:
                print(f"Could not notify admin {admin_id}: {e}")

@app.on_callback_query()
async def callback_handler(_, cq: CallbackQuery):
    data = cq.data

    if data == "confirm_delete_all_movies":
        movies_col.delete_many({})
        reply_msg = await cq.message.edit_text("‚úÖ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        asyncio.create_task(delete_message_later(reply_msg.chat.id, reply_msg.id))
        await cq.answer("‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    elif data == "cancel_delete_all_movies":
        reply_msg = await cq.message.edit_text("‚ùå ‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        asyncio.create_task(delete_message_later(reply_msg.chat.id, reply_msg.id))
        await cq.answer("‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

    elif data.startswith("movie_"):
        # ‡¶è‡¶á ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ñ‡¶® ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶Ö‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶∞‡¶æ /start ‡¶™‡ßá‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡¶ø
        await cq.answer("‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", show_alert=True)

    elif data.startswith("lang_"):
        _, lang, query_clean = data.split("_", 2)
        
        potential_lang_matches_cursor = movies_col.find(
            {"language": lang, "title_clean": {"$regex": query_clean, "$options": "i"}},
            {"title": 1, "message_id": 1, "title_clean": 1, "views_count": 1}
        ).limit(50)

        potential_lang_matches = list(potential_lang_matches_cursor)
        
        fuzzy_data_for_matching_lang = [
            {"title_clean": m["title_clean"], "original_title": m["title"], "message_id": m["message_id"], 
             "language": lang, "views_count": m.get("views_count", 0)}
            for m in potential_lang_matches
        ]
        
        loop = asyncio.get_running_loop()
        matches_filtered_by_lang = await loop.run_in_executor(
            thread_pool_executor,
            find_corrected_matches,
            query_clean,
            fuzzy_data_for_matching_lang,
            70,
            RESULTS_COUNT
        )

        if matches_filtered_by_lang:
            buttons = []
            for m in matches_filtered_by_lang[:RESULTS_COUNT]:
                buttons.append([InlineKeyboardButton(f"{m['title'][:40]} ({m.get('views_count',0)} ‡¶≠‡¶ø‡¶â)", url=f"https://t.me/{app.me.username}?start=watch_{m['message_id']}")])
            reply_msg = await cq.message.edit_text(
                f"‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ({lang}) - ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
            asyncio.create_task(delete_message_later(reply_msg.chat.id, reply_msg.id))
        else:
            await cq.answer("‡¶è‡¶á ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§", show_alert=True)
        await cq.answer()

    elif data.startswith("request_movie_"):
        _, user_id_str, encoded_movie_name = data.split("_", 2)
        user_id = int(user_id_str)
        movie_name = urllib.parse.unquote_plus(encoded_movie_name)
        username = cq.from_user.username or cq.from_user.first_name

        requests_col.insert_one({
            "user_id": user_id,
            "username": username,
            "movie_name": movie_name,
            "request_time": datetime.now(UTC),
            "status": "pending"
        })
        
        await cq.answer(f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß '{movie_name}' ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", show_alert=True)
        
        admin_request_btns = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", callback_data=f"req_fulfilled_{user_id}_{encoded_movie_name}"),
            InlineKeyboardButton("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", callback_data=f"req_rejected_{user_id}_{encoded_movie_name}")
        ]])

        for admin_id in ADMIN_IDS:
            try:
                await app.send_message(
                    admin_id,
                    f"‚ùó *‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß (‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá)!*\n\n"
                    f"üé¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ: `{movie_name}`\n"
                    f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: [{username}](tg://user?id={user_id}) (`{user_id}`)",
                    reply_markup=admin_request_btns,
                    disable_web_page_preview=True
                )
            except Exception as e:
                print(f"Could not notify admin {admin_id} about request from callback: {e}")
        
        try:
            edited_msg = await cq.message.edit_text(
                f"‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§\n\n"
                f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß **'{movie_name}'** ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶è‡¶ü‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§",
                reply_markup=None
            )
            asyncio.create_task(delete_message_later(edited_msg.chat.id, edited_msg.id))
        except Exception as e:
            print(f"Error editing user message after request: {e}")

    elif data.startswith("like_") or data.startswith("dislike_"):
        action, message_id_str, user_id_str = data.split("_", 2)
        movie_message_id = int(message_id_str)
        user_id = int(user_id_str)

        movie = movies_col.find_one({"message_id": movie_message_id})
        
        if not movie:
            await cq.answer("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§", show_alert=True)
            return

        # Ensure rated_by exists as a list
        if "rated_by" not in movie:
            movie["rated_by"] = []

        if user_id in movie["rated_by"]:
            await cq.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶§‡ßá ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®!", show_alert=True)
            return

        update_query = {"$inc": {}, "$push": {"rated_by": user_id}}
        if action == "like":
            update_query["$inc"]["likes"] = 1
        elif action == "dislike":
            update_query["$inc"]["dislikes"] = 1
        
        movies_col.update_one({"message_id": movie_message_id}, update_query)
        
        updated_movie = movies_col.find_one({"message_id": movie_message_id})
        updated_likes = updated_movie.get('likes', 0)
        updated_dislikes = updated_movie.get('dislikes', 0)

        new_rating_buttons = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"üëç ‡¶≤‡¶æ‡¶á‡¶ï ({updated_likes})", callback_data="noop"),
                InlineKeyboardButton(f"üëé ‡¶°‡¶ø‡¶∏‡¶≤‡¶æ‡¶á‡¶ï ({updated_dislikes})", callback_data="noop")
            ]
        ])

        try:
            await cq.message.edit_reply_markup(reply_markup=new_rating_buttons)
            await cq.answer("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§", show_alert=True)
        except Exception as e:
            print(f"Error editing message after rating: {e}")
            await cq.answer("‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", show_alert=True)

    elif "_" in data:
        parts = data.split("_", 3)
        if len(parts) == 4 and parts[0] in ["has", "no", "soon", "wrong"]: 
            action, uid, mid, raw_query = parts
            uid = int(uid)
            responses = {
                "has": f"‚úÖ @{cq.from_user.username or cq.from_user.first_name} ‡¶ú‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶® ‡¶Ø‡ßá **{raw_query}** ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡¶Ü‡¶õ‡ßá‡•§ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                "no": f"‚ùå @{cq.from_user.username or cq.from_user.first_name} ‡¶ú‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶® ‡¶Ø‡ßá **{raw_query}** ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡¶®‡ßá‡¶á‡•§",
                "soon": f"‚è≥ @{cq.from_user.username or cq.from_user.first_name} ‡¶ú‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶® ‡¶Ø‡ßá **{raw_query}** ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶¨‡ßá‡•§",
                "wrong": f"‚úèÔ∏è @{cq.from_user.username or cq.from_user.first_name} ‡¶¨‡¶≤‡¶õ‡ßá‡¶® ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßá‡¶õ‡ßá‡¶®: **{raw_query}**‡•§"
            }
            if action in responses:
                try:
                    m = await app.send_message(uid, responses[action])
                    asyncio.create_task(delete_message_later(m.chat.id, m.id))
                    await cq.answer("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶™‡¶ï‡ßç‡¶∑ ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                except Exception as e:
                    await cq.answer("‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", show_alert=True)
                    print(f"Error sending admin feedback message: {e}")
            else:
                await cq.answer("‡¶Ö‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡ßá‡¶ü‡¶æ‡•§", show_alert=True)
        else:
            await cq.answer("‡¶Ö‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡ßá‡¶ü‡¶æ‡•§", show_alert=True)

if __name__ == "__main__":
    print("‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    app.run()
